# 1. Input

```java
package com.lgcns.test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class RunManager {

	public static void main(String[] args) throws IOException {
		
		InputStreamReader reader = new InputStreamReader(System.in);
		BufferedReader br = new BufferedReader(reader);
		String  str;
		while(true) {
			str = br.readLine();
		
		}

	}

}
```



# 2. File I/O

```java
import java.io.*;

public class FileIO {

    /**
     * INPUT 폴더 하위에 위치한 파일들의 파일명(상대경로 포함), 크기를 Console화면에 출력
     * INPUT 폴더 하위에 위치한 파일들 중 크기가 3kbyte가 넘는 파일들은 모두 OUTPUT 폴더로 복사
     * (OUTPUT 폴더 및 서브 폴더 생성)
     * 단, 파일 복사 시 바이너리 파일을 버퍼에 읽고 쓰는 방식으로 구현하고
     * 버퍼의 크기는 512Byte로 설정
     */

    static String rootPath = "./INPUT";

    public static void main(String[] args) throws IOException {

        fileSearchAll(rootPath);
    }

    private static void fileSearchAll(String path) {

        File directory = new File(path);
        File[] fList = directory.listFiles();

        for(File file : fList) {
            if(file.isDirectory() ) {
                fileSearchAll(file.getPath());
            }
            else {
                String partPath = path.substring(rootPath.length());
                System.out.println("." + partPath + "/" + file.getName());
                if (file.length() > 3*1024) {
                    copyFile(partPath, file.getName());
                }
            }
        }
    }

    private static void copyFile(String partPath, String filename) {

        final int BUFFER_SIZE = 512;
        int readLen;

        try {
            // Create Folder
            File destFolder = new File("./OUTPUT" + partPath);
            if(!destFolder.exists()) {
                destFolder.mkdirs();
            }

            // Copy File
            InputStream inputStream = new FileInputStream("./INPUT"+partPath + "/" + filename);
            OutputStream outputStream = new FileOutputStream("./OUTPUT"+partPath + "/" + filename);

            byte[] buffer = new byte[BUFFER_SIZE];

            while ((readLen = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, readLen);
            }

            inputStream.close();
            outputStream.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
}
```



# 3. File 내용 읽기

```java
package com.lgcns.test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;

public class RunManager {
	
	static String rootPath = "./";

	public static void main(String[] args) throws IOException {
		
		InputStreamReader reader = new InputStreamReader(System.in);
		BufferedReader br = new BufferedReader(reader);
		String  str;
		while(true) {
			str = br.readLine();
			
			String proxy = fileSearch(rootPath + str + ".txt");
			String service = fileSearch(rootPath + proxy);
			
			System.out.println(service);
			
		}

	}

	private static String fileSearch(String path) {
				
		String result = "";
		
		try {
			result = new String(Files.readAllBytes(Paths.get(path)));
		} catch(IOException e) {
			System.out.println("Exception!");
		}
		
		return result;
	}

}

```



```java
	private static String fileSearch(String fileName, String command) {
		
		String result = "";
		
		try {
			List<String> resultList = Files.readAllLines(Paths.get(fileName));
			
			for(String line : resultList) {
				String[] lineList = line.split("#");
				if(lineList[0].equals(command)) {
					result = lineList[1];
					break;
				}
			}
		} catch(IOException e) {
			System.out.println("Exception!");
		}
		
		return result;
	}
	
	private static String callService(String serviceName) {
		
		String result = "";
		
		try {
			result = new String(Files.readAllBytes(Paths.get(serviceName)));
			
		} catch(IOException e) {
			System.out.println("Exception!");
		}
		
		return result;
	}

}
```



# 4. HTTP 서버

```java
package test;

import org.eclipse.jetty.server.*;
import org.eclipse.jetty.servlet.ServletHandler;

public class MyServer {

	public static void main(String[] args) throws Exception {
		new MyServer().start();
	}

	public void start() throws Exception {
		Server server = new Server();
		ServerConnector http = new ServerConnector(server);
		http.setHost("127.0.0.1");
		http.setPort(8080);
		server.addConnector(http);

		ServletHandler servletHandler = new ServletHandler();
		servletHandler.addServletWithMapping(MyServlet.class, "/mypath");
		server.setHandler(servletHandler);

		server.start();
		server.join();
	}
}
```



```java
package test;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.*;

public class MyServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		res.setStatus(200);
		res.getWriter().write("Hello!");
	}
}
```





# 5. HTTP Client

```java
package test;

import org.eclipse.jetty.client.HttpClient;
import org.eclipse.jetty.client.api.ContentResponse;
import org.eclipse.jetty.http.HttpMethod;

public class MyClient {

	public static void main(String[] args) throws Exception {
		HttpClient httpClient = new HttpClient();
		httpClient.start();
		ContentResponse contentRes = httpClient.newRequest("http://127.0.0.1:8080/mypath").method(HttpMethod.GET)
				.send();
		System.out.println(contentRes.getContentAsString());
	}
}
```



# 6. Json

```java
package test;

import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

public class MyJson {

	public static void main(String[] args) {
		JsonElement jsonElement = JsonParser.parseString("{ \"key\":\"value\" }");
		System.out.println(jsonElement.toString());
	}
}

```

